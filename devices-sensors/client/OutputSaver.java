/*
 * Copyright (c) 2010, Department of Information Engineering, University of Padova.
 * All rights reserved.
 *
 * This file is part of Teseo.
 *
 * Teseo is free software: you can redistribute it and/or modify it under the terms
 * of the GNU General Public License as published by the Free Software Foundation,
 * either version 3 of the License, or (at your option) any later version.
 *
 * Teseo is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 * PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Teseo.  If not, see <http://www.gnu.org/licenses/>.
 *
 * ===================================================================================
 */

/**
 *
 * This is an application to save the data sent by the mobile
 * node to the connected PC via serial port into a TXT file.
 *
 * See the help of this program calling java OutputSaver -h
 * 
 * @author Filippo Zanella <filippo.zanella@dei.unipd.it>
 */

import java.io.*;
import java.lang.Math;
import net.tinyos.message.Message;
import net.tinyos.message.MessageListener;
import net.tinyos.message.MoteIF;
import net.tinyos.message.SerialPacket;
import net.tinyos.packet.BuildSource;
import net.tinyos.packet.PhoenixSource;
import net.tinyos.util.PrintStreamMessenger;

public class OutputSaver implements MessageListener {
 
    /** Communication with the mote */
    private MoteIF mote;
    /** The messages from the mote */
    private PingClientMsg PingClientMsg;
    private DataMsg dataMsg;
    /** The file wich stores the data acquired */
    public FileOutputStream outputFile;
    /** The stream of output file */
    public PrintStream output;
    /** First message arrived */
    private boolean firstMsg = true;
    
    public OutputSaver(MoteIF mif, String file, String source) {
        try {
            outputFile = new FileOutputStream(file + ".txt");
            output = new PrintStream(outputFile);
			output.println("##File generated by OutputSaver ##");
            output.println("");
            output.println("[ID]\t[#Package]\t[RSS(dBm)]\t[LQI(dBm)]");
			output.println("");
			System.err.println("Copyright (c) 2008, Department of Information Engineering, University of Padova.");
			System.err.println("");
            System.out.print("Connecting to serial port...");
            mote = mif;
            mote.registerListener(new DataMsg(), this);
            mote.registerListener(new PingClientMsg(), this);
        } catch (IOException ioex) {
            System.err.println("Exception thrown when creating a file. Exiting.");
            System.err.println(ioex);
        } catch (Exception ex) {
            System.err.println("Couldn't contact serial port.");
            System.err.println(ex);
        }
        System.out.println("done.");
	System.out.println("Connected with " + source +  ".");
		System.out.println("OutputSaver started.");
	System.out.println("Saving data to file " + file + ".txt.");
    }
    
    synchronized public void messageReceived(int dest, Message m) {
        if(m instanceof DataMsg)
	    {
		dataMsg = (DataMsg) m;

		/*System.out.println("[ID]: " + dataMsg.get_fixedNodeID() + "[Pkg]: " + dataMsg.get_pcktID()  + "\t[RSS(dBm)]: "
				   + dataMsg.get_rss()  + "\t[LQI(dBm)]:" + dataMsg.get_lqi());*/
		try 
		    {
			output.println(dataMsg.get_fixedNodeID() + "\t" + dataMsg.get_pcktID() + "\t"
				        + dataMsg.get_rss() + "\t" + dataMsg.get_lqi());

		    } catch (Exception e) {
			System.err.println("Exception thrown when writing the outputs. Exiting.");
			System.err.println(e);
		    }
	    }
	else if(m instanceof PingClientMsg)
	    {
	        PingClientMsg = (PingClientMsg) m;

		System.out.println("####Ping "+ PingClientMsg.get_pcktID() 
		      + " received. Step number " + PingClientMsg.get_step() + "####");
		try 
		    {
			output.println("####Ping "+ PingClientMsg.get_pcktID() 
		      + " received. Step number " + PingClientMsg.get_step() + "####");

		    } catch (Exception e) {
			System.err.println("Exception thrown when writing the outputs. Exiting.");
			System.err.println(e);
		    }
	    }
    }
 
	private static void usage() {
		System.err.println("usage: OutputSaver [options] [-comm SOURCE] [-f FILE]");
		System.err.println("options:");
		System.err.println("-h\t\t Show this help");
		System.err.println("[-comm SOURCE]\t Set the serial source connection");
		System.err.println("[-f FILE]\t Save the data to a <FILE>.txt");
		System.err.println("");
		System.err.println("The default command is: OutputSaver -comm serial@/dev/ttyUSB0:tmote -f data");
	}
    
    public static void main(String[] args) {
	String  source = "serial@/dev/ttyUSB0:tmote";
	String  file = "dati";
        
	if(args.length == 1) {
	    if (!args[0].equals("-h")) {
		usage();
		System.exit(1);
	    }
	}
	if (args.length == 2) {
	    if (!args[0].equals("-comm")) {
		usage();
		System.exit(1);
	    }
	    source = args[1];
	} else if (args.length == 4) {
	    if (!args[0].equals("-comm")) {
		usage();
		System.exit(1);
	    }
	    source = args[1];
	    file = args[3];
	} else if (args.length != 0) {
	    usage();
	    System.exit(1);
	}
        
	PhoenixSource phoenix;
        
	if (source == null) {
	    phoenix = BuildSource.makePhoenix(PrintStreamMessenger.err);
	} else {
	    phoenix = BuildSource.makePhoenix(source, PrintStreamMessenger.err);
	}
        
	MoteIF mif = new MoteIF(phoenix);
	new OutputSaver(mif,file,source);
    }
}
